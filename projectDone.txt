from re import *
import re
from datetime import *
import sys  # used to redirect the output to a file


class MedicalTestRecord:
    def __init__(self, patientID, testName, date, result, unit, status):
        self.patientID = patientID
        self.testName = testName
        self.date = date
        self.result = result
        self.unit = unit
        self.status = status

    def __str__(self):
        return f"{self.patientID}: {self.testName}, {self.date}, {self.result}, {self.unit}, {self.status}"


class Patient:
    def __init__(self, id) -> None:
        self.id = id
        self.records = []

    def addRecord(self, testName, date, result, unit, status):
        self.records.append(
            MedicalTestRecord(self.id, testName, date, result, unit, status.lower()))  # Convert status to lowercase

    def load(self, record_file):
        with open(record_file, 'r') as file:
            for line in file:
                if line.startswith(self.id):
                    parts = line.strip().split(': ')
                    if len(parts) > 1:  # Ensure there is a second part
                        # Match the format as needed: testName, date, result, unit, status
                        record_details = parts[1].split(', ')
                        if len(record_details) == 5:  # Ensure there are enough details
                            self.addRecord(record_details[0], record_details[1], record_details[2], record_details[3],
                                           record_details[4])
                    else:
                        print(f"Line format is incorrect: {line.strip()}")

    def __str__(self) -> str:
        if (len(self.records) == 0):
            return "Patient exists but have no tests"

        result = ""
        for i in self.records:
            result += ("\n" + str(i))
        return f"Tests are:{result}"


def loadTests():
    tests = {}
    with open("medicalTest.txt", 'r') as file:
        for line in file:
            parts = line.strip().split(';')
            fullName = parts[0].split('(')[0].strip()  # to get full name of Hemoglobin
            shortName = parts[0].split('(')[1].replace(')', '').strip()  # to get short name Hgb
            unit = parts[2].split(':')[1].strip()  # to get the unit of the test name
            tests[fullName] = (fullName, unit)
            tests[shortName] = (shortName, unit)
    print(tests)


def checkDateformat(date_string):
    try:
        datetime.strptime(date_string, "%Y-%m")
        return True
    except ValueError:
        return False


def idFilter(records):
    while True:
        ID = (input("Enter an ID: "))
        if len(ID) != 7 or not ID.isdigit():
            print("ID must be 7 digits number")
            continue
        else:
            break
    ID = int(ID)
    records = list(records)
    result = []
    for i in records:
        testID = int(i.split(" ")[0].split(":")[0])
        if testID == ID:
            result.append(i)

    return result


def nameFilter(records):
    name = input("Enter a name: ")
    name = name.strip()
    records = list(records)
    result = []
    testName = ""
    for i in records:
        parts = i.split(',')
        testName = parts[0].split(':')[1].strip()

        if testName.lower() == name.lower():
            result.append(i)

    return result


def periodFilter(records):
    while True:
        startingDate = input("Enter starting period in YYYY-MM: ")
        try:
            startingDate = datetime.strptime(startingDate, "%Y-%m")
            break
        except ValueError:
            print("invalid format")

    while True:
        endingDate = input("Enter ending period YYYY-MM: ")
        try:
            endingDate = datetime.strptime(endingDate, "%Y-%m")
            break
        except ValueError:
            print("invalid format")
    result = []
    for i in records:
        parts = i.split(',')
        testDate = datetime.strptime(parts[1].strip(), "%Y-%m")
        if startingDate <= testDate <= endingDate:
            result.append(i)
    return result


def parseDuration(input_str):
    try:
        # Split the input string into days, hours, and minutes
        days, hours, minutes = map(int, (input_str).split('-'))
        # Create a timedelta object with the parsed values
        return (days, hours, minutes)

    except ValueError:
        return None


def isTimeBounded(startingTime, testTime, endingTime):
    # case1: days are in range
    if startingTime[0] < testTime[0] < endingTime[0]:
        return True

    # case2: days are out of range
    if testTime[0] < startingTime[0] or testTime[0] > endingTime[0]:
        return False

    # case 3:if days are equal
    elif startingTime[0] == testTime[0] and endingTime[0] == testTime[0]:
        # case a
        if startingTime[1] < testTime[1] < endingTime[1]:
            return True
        # case b
        if testTime[1] < startingTime[1] or testTime[1] > endingTime[1]:
            return False
        # case c
        elif startingTime[1] == testTime[1] and endingTime[1] == testTime[1]:
            # case a.1
            if startingTime[2] <= testTime[2] <= endingTime[2]:
                return True
            else:
                return False
        # case d
        elif startingTime[1] == testTime[1]:
            return testTime[2] >= startingTime[2]

        # case e:
        elif endingTime[1] == testTime[1]:
            return testTime[2] <= endingTime[2]

    # case4: if starting day equal testing day
    elif startingTime[0] == testTime[0]:
        if testTime[1] > startingTime[1]:
            return True
        elif testTime[1] == startingTime[1]:
            return testTime[2] >= startingTime[2]
        else:
            return False
    # case5: if ending day equal testing day
    elif endingTime[0] == testTime[0]:
        if testTime[1] < endingTime[1]:
            return True
        elif testTime[1] == endingTime[1]:
            return testTime[2] <= endingTime[2]
        else:
            return False


def turnaroundFilter(records):
    while True:
        startingTime = input("Enter starting time in DD-hh-mm: ")
        if match(r"^\d{2}-\d{2}-\d{2}$", startingTime):
            break
        else:
            print("invalid format")
    startingTime = parseDuration(startingTime)

    while True:
        endingTime = input("Enter ending time in DD-hh-mm: ")
        if match(r"^\d{2}-\d{2}-\d{2}$", endingTime):
            break
        else:
            print("invalid format")
    endingTime = parseDuration(endingTime)

    # load times from MedicalTests.txt
    f = open("medicalTest.txt", "r")
    testDict = {}
    for i in f:
        testName = i.split('(')[1].split(')')[0].strip()
        parts = i.split(';')
        testTime = parts[-1].strip()
        testTime = parseDuration(testTime)
        testDict[f"{testName}"] = testTime

    result = []
    for i in records:
        parts = i.split(',')
        testName = parts[0].split(':')[1].strip()
        testTime = testDict[f"{testName}"]

        if isTimeBounded(startingTime, testTime, endingTime):
            result.append(i)

    return result


def statusFilter(records):
    testStatus = ["Pending", "Reviewed", "Completed"]
    testStatus_lower = [status.lower() for status in testStatus]  # Convert to lowercase

    while True:
        status = input("Enter a status: ").lower()  # Convert input to lowercase
        if status not in testStatus_lower:  # Compare ignoring case
            print("Choose an accepted status")
            continue
        else:
            break
    result = []
    for i in records:
        parts = i.split(',')
        testStatus = parts[4].strip()

        if testStatus == status:
            result.append(i)

    return result


def findMedicalTest(testName):
    # this function takes testName, and returns its information
    f = open("medicalTest.txt", "r")
    for i in f:
        name = i.split('(')[1].split(')')[0].strip()
        if (testName.lower() == name.lower()):
            return i
    f.close()


def abnormalFilter(records):
    # load avg ranges from MedicalTests.txt
    result = []
    for i in records:
        testName = i.split(",")[0].split(" ")[1].strip()
        line = str(findMedicalTest(testName))
        parts = line.split(';')
        testRange = parts[1].strip().split(":")[1].strip()

        testResult = float(i.split(",")[2].strip())
        # to determine accepted ranges
        testRange = testRange.split(",")
        # if range is >lowerLimit, <upperLimit
        if (len(testRange) == 2):
            upperLimit = float(testRange[1].strip().split(" ")[1])
            # print if it is abnormal
            if testResult >= upperLimit:
                result.append(i)

        # if range is <upperLimit or >lowerLimit
        elif (len(testRange) == 1):
            # there are two cases

            # sign is either < or >
            sign = testRange[0].split(" ")[0].strip()
            upperLimit = float(testRange[0].split(" ")[1].strip())
            # case1: if testResult > upperLimit  -->>abnormal
            if sign == "<" and testResult > upperLimit:
                result.append(i)

            # case2: othersise, result is normal if it is > lowerLimit
            # no abnormal tests here

    return result


def filter():
    # Collect user choices
    choices = []
    while True:
        print("\nChoose one or more option:")
        print("1. Patient ID")
        print("2. Test Name")
        print("3. Abnormal tests")
        print("4. In a specific period")
        print("5. Test status")
        print("6. Test turnaround time within a period ")
        try:
            userInput = int(input())
        except ValueError:
            print("wrong choice")
            continue

        if 1 <= userInput <= 6:
            choices.append(userInput)
            print("\n1. Choose more criteria.")
            print("or press enter to finish.")
            userInput = input()
            if userInput == "1":
                continue
            else:
                break
        else:
            print(" wrong choice")

    # Load all records from the file
    with open("medicalRecord.txt", "r") as f:
        result = [line.strip() for line in f]

    # Apply selected filters in sequence
    for choice in choices:
        if choice == 1:
            result = idFilter(result)
        elif choice == 2:
            result = nameFilter(result)
        elif choice == 3:
            result = abnormalFilter(result)
        elif choice == 4:
            result = periodFilter(result)
        elif choice == 5:
            result = statusFilter(result)
        elif choice == 6:
            result = turnaroundFilter(result)

    # Print the filtered results
    if result:
        for line in result:
            print(line)
    else:
        print("No matched results")


def printSummary():
    myDict = {}

    # Read Medical Tests and store in dictionary
    with open("medicalTest.txt", "r") as f:
        for line in f:
            if '(' in line and ')' in line:  # Check if line contains parentheses
                try:
                    testName = line.split('(')[1].split(')')[0].strip()
                    # Initialize values
                    myDict[testName] = {
                        'min': float('inf'),
                        'max': float('-inf'),
                        'sum': 0.0,
                        'counter': 0
                    }
                except IndexError:
                    print(f"Skipping line due to unexpected format: {line}")
                    continue

    # Read Medical Records and update dictionary
    with open("medicalRecord.txt", "r") as f:
        for line in f:
            parts = line.split(",")
            if len(parts) < 3:
                print(f"Skipping malformed record: {line}")
                continue
            testName = parts[0].split(" ")[1].strip()
            if testName in myDict:
                try:
                    testResult = float(parts[2].strip())
                except ValueError:
                    print(f"Skipping non-numeric test result: {parts[2]}")
                    continue  # Skip this line if the result is not a valid float
                myDict[testName]["counter"] += 1
                myDict[testName]["sum"] += testResult

                if testResult < myDict[testName]["min"]:
                    myDict[testName]["min"] = testResult
                if testResult > myDict[testName]["max"]:
                    myDict[testName]["max"] = testResult

    # Print Summary
    print("Summary for all tests")
    for testName, stats in myDict.items():
        print(f"Test Name: {testName}")
        if stats['counter'] > 0:
            print(f"Average Value = {stats['sum'] / stats['counter']:.2f}")
            print(f"Max Value = {stats['max']:.2f}")
            print(f"Min Value = {stats['min']:.2f}")
        else:
            print("No valid records found for this test.")
        print("=================================")


def MinTurnaround(turnaround, min):
    turnaround = parseDuration(turnaround)
    min = parseDuration(min)

    # [0]:days,,, [1]:hours,,,[2]:minutes

    if turnaround[0] > min[0]:
        return False
    if turnaround[0] == min[0]:

        if turnaround[1] > min[1]:
            return False
        if turnaround[1] == min[1]:
            return turnaround[2] <= min[2]
        else:
            return True
    else:
        return True


def MaxTurnaround(turnaround, Max):
    turnaround = parseDuration(turnaround)
    Max = parseDuration(Max)

    # [0]:days,,, [1]:hours,,,[2]:minutes

    if turnaround[0] < Max[0]:
        return False
    if turnaround[0] == Max[0]:

        if turnaround[1] < Max[1]:
            return False
        if turnaround[1] == Max[1]:
            return turnaround[2] >= Max[2]
        else:
            return True
    else:
        return True


def printTurnaround():
    with open("medicalTest.txt", "r") as f:
        numOfTests = 0
        totalDays = 0
        totalHours = 0
        totalMinutes = 0
        minTime = "99-99-99"
        maxTime = "00-00-00"
        minName = ""
        maxName = ""

        for i in f:
            # Check if the line contains a '(' and ')'
            if '(' not in i or ')' not in i:
                continue  # Skip lines without the expected format

            numOfTests += 1
            testName = i.split('(')[1].split(')')[0].strip()
            parts = i.split(';')

            # Extract turnaround time string, removing non-numeric characters
            testTime = ''.join(char for char in parts[-1].strip() if char.isdigit() or char == '-')

            # Ensure testTime is formatted as expected: "DD-HH-MM"
            if len(testTime.split("-")) != 3:
                continue  # Skip this line if the time format is incorrect

            # testTime[0]: Day | testTime[1]: Hour | testTime[2]: Minute
            timeList = testTime.split("-")
            totalDays += int(timeList[0])
            totalHours += int(timeList[1])
            totalMinutes += int(timeList[2])

            if MinTurnaround(testTime, minTime):
                minTime = testTime
                minName = testName
            if MaxTurnaround(testTime, maxTime):
                maxTime = testTime
                maxName = testName

        if numOfTests == 0:
            print("No valid tests found.")
            return

        # Calculate average turnaround time
        totalMinutes += totalDays * 24 * 60  # convert days to minutes
        totalMinutes += totalHours * 60  # convert hours to minutes

        avg_minutes = totalMinutes // numOfTests
        avg_days = avg_minutes // (24 * 60)  # convert back to days
        avg_minutes %= (24 * 60)  # remaining minutes after days
        avg_hours = avg_minutes // 60  # convert to hours
        avg_minutes %= 60  # remaining minutes after hours

        print(f"Test with MIN turnaround: {minName}. Time: {minTime}")
        print(f"Test with MAX turnaround: {maxName}. Time: {maxTime}")
        print(f"Average turnaround time : {avg_days:02}-{avg_hours:02}-{avg_minutes:02}")


class MedicalRecordSystem:
    def __init__(self, record_file, tests_file):
        self.record_file = record_file
        self.tests = {}  # Initialize tests attribute here
        self.loadTests(tests_file)  # Ensure this is called to load tests
        self.patients = {}

    def loadTests(self, tests_file):
        tests = {}
        with open(tests_file, 'r') as file:
            for line in file:
                parts = line.strip().split(';')
                if len(parts) < 3:  # Ensure there are enough parts
                    print(f"Skipping invalid line: {line.strip()}")
                    continue  # Skip this line if it doesn't have enough parts
                fullName = parts[0].split('(')[0].strip()
                shortName = parts[0].split('(')[1].replace(')', '').strip()
                unit = parts[2].split(':')[1].strip() if ':' in parts[2] else parts[2].strip()  # Handle unit extraction
                tests[fullName] = (shortName, unit)
                tests[shortName] = (shortName, unit)
        self.tests = tests  # Assign loaded tests to the instance variable

    def validate_patientID_format(self, patientID):
        return len(patientID) == 7 and patientID.isdigit()

    def validate_patientID_exists(self, patientID):
        if self.validate_patientID_format(patientID):
            with open(self.record_file, 'r') as file:
                for line in file:
                    if line.startswith(patientID):
                        return True
        return False

    def validate_testName(self, testName):
        return testName in self.tests

    def validate_date(self, date_str):
        parts = date_str.split('-')
        if len(parts) != 2:
            print("Date should be in the format YYYY-MM.")
            return False

        year, month = parts[0], parts[1]
        if not (year.isdigit() and month.isdigit()):
            print("should be numeric.")
            return False

        if len(year) != 4 or len(month) != 2:
            print("Date should be in the format YYYY-MM.")
            return False

        year = int(year)
        month = int(month)
        if not (1 <= month <= 12):
            print("wrong month")
            return False

        today = datetime.today()
        try:
            input_date = datetime(year, month, 1)
        except ValueError:
            print("ERROR! Invalid date.")
            return False

        if input_date > today:
            print("ERROR! Date cannot be in the future.")
            return False

        return True

    def validate_result(self, result):
        try:
            float(result)
            return True
        except ValueError:
            return False

    def validate_status(self, status):
        return status.lower() in ["pending", "completed", "reviewed"]

    def validID(self, require_existing=True):
        while True:
            patientID = input("Enter patient ID: ")
            if self.validate_patientID_format(patientID):
                if require_existing and self.validate_patientID_exists(patientID):
                    return patientID
                elif not require_existing:
                    return patientID
            print("wrong input, please try again.")

    def get_valid_testName(self):
        while True:
            testName = input("Enter test name: ")
            if self.validate_testName(testName):
                unit = self.tests[testName][1]  # Extract unit
                return testName, unit
            print("Invalid test name.")

    def get_valid_date(self):
        while True:
            date = input("Enter date (YYYY-MM): ")
            if self.validate_date(date):
                return date

    def get_valid_result(self):
        while True:
            result = input("Enter test result: ")
            if self.validate_result(result):
                return result
            print("Invalid result.")

    def get_valid_status(self):
        while True:
            status = input("Enter test status (pending, completed, reviewed): ")
            if self.validate_status(status):
                return status.lower()  # Return status in lowercase
            print("Invalid status.")

    def addTestRecord(self):
        patientID = self.validID(require_existing=False)
        if patientID not in self.patients:
            self.patients[patientID] = Patient(patientID)
            update_patient_dict(patientID, self.patients[patientID])

        testName, unit = self.get_valid_testName()
        date = self.get_valid_date()
        result = self.get_valid_result()
        status = self.get_valid_status()

        # Add current time if status is 'completed'
        if status == 'completed':
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M")  # Format current time
            self.patients[patientID].addRecord(testName, date, result, unit, status)
            # Ensure the time is included in the record if status is 'completed'
            record_to_add = f"{self.patients[patientID].records[-1]}, {current_time}"
        else:
            self.patients[patientID].addRecord(testName, date, result, unit, status)
            record_to_add = str(self.patients[patientID].records[-1])

        # Remove any unwanted time fields from the record
        record_parts = record_to_add.split(", ")
        filtered_parts = [part for part in record_parts if not re.match(r'^\d{2}-\d{2}-\d{2}$', part)]
        final_record = ", ".join(filtered_parts)

        with open(self.record_file, 'a') as file:
            file.write(final_record + "\n")  # Ensure only one newline is added

    def updateTestResult(self):
        patientID = self.validID(require_existing=True)
        if not patientID:
            print("Error: Patient ID does not exist.")
            return

        testName = self.validTestName(patientID)
        date = self.validDate(patientID, testName)

        while True:
            print("select case to update")
            print("1. Result")
            print("2. Date")
            print("3. Status")
            print("4. Exit")
            choice = input("Enter your choice: ")

            if choice == '1':
                new_result = self.get_valid_result()
                self.updateRecord(patientID, testName, date, 'result', new_result)
                print("Result updated successfully.")
                break
            elif choice == '2':
                new_date = self.get_valid_date()
                self.updateRecord(patientID, testName, date, 'date', new_date)
                print("Date updated successfully.")
                break
            elif choice == '3':
                new_status = self.get_valid_status()
                self.updateRecord(patientID, testName, date, 'status', new_status)
                print("Status updated successfully.")
                break
            elif choice == '4':
                print("Exiting update...")
                break
            else:
                print("Invalid choice")

    def deleteTest(self):
        patientID = self.validID(require_existing=True)
        if not patientID:
            print("Error: Patient ID does not exist.")
            return

        testName = self.validTestName(patientID)
        if not testName:
            print("Error: Test name is invalid.")
            return

        date = self.validDate(patientID, testName)
        if not date:
            print("Error: Date is invalid.")
            return

        self.deleteRecord(patientID, testName, date)
        print(f"Test '{testName}' on date '{date}' for patient ID '{patientID}' has been deleted.")

    def deleteRecord(self, patientID, testName, date):
        with open(self.record_file, 'r') as file:
            lines = file.readlines()

        with open(self.record_file, 'w') as file:
            for line in lines:
                if not line.startswith(f"{patientID}: {testName}, {date},"):
                    file.write(line)

    def validTestName(self, patientID):
        while True:
            testName = input("Enter Test Name: ")
            if self.validate_testName(testName):
                with open(self.record_file, 'r') as file:
                    for line in file:
                        if line.startswith(f"{patientID}: {testName},"):
                            return testName
                print("Test Name not found for this Patient ID in MedicalRecord.")
            else:
                print("Invalid test name. Please try again.")

    def validDate(self, patientID, testName):
        while True:
            date = input("Enter Date (YYYY-MM): ")
            if self.validate_date(date):
                with open(self.record_file, 'r') as file:
                    for line in file:
                        if line.startswith(f"{patientID}: {testName}, {date},"):
                            return date
                print("Date not found for this Test Name and Patient ID in MedicalRecord.")
            else:
                print("Invalid date format. Please try again.")

    def updateRecord(self, patientID, testName, date, field, new_value):
        updated_lines = []
        with open(self.record_file, 'r') as file:
            for line in file:
                if line.startswith(f"{patientID}: {testName}, {date},"):
                    parts = line.strip().split(', ')
                    if field == 'result':
                        parts[2] = new_value
                    elif field == 'date':
                        parts[1] = new_value
                    elif field == 'status':
                        if parts[4] == 'completed' and len(
                                parts) > 5:  # Check if status is completed and time field exists
                            if new_value.lower() in ['pending', 'reviewed']:
                                parts[4] = new_value.lower()  # Update status
                                parts = parts[:5]  # Remove the time field
                        else:
                            parts[4] = new_value.lower()  # Convert status to lowercase
                            if new_value.lower() == 'completed':
                                current_time = datetime.now().strftime("%Y-%m-%d %H:%M")  # Format current time
                                parts.append(current_time)  # Add current time to the parts
                    updated_line = f"{parts[0]}, {parts[1]}, {parts[2]}, {parts[3]}, {parts[4]}" + (
                        f", {parts[5]}" if len(parts) > 5 else "") + "\n"
                    updated_lines.append(updated_line)
                else:
                    updated_lines.append(line)

        with open(self.record_file, 'w') as file:
            file.writelines(updated_lines)

    def export(self):
        with open(self.record_file, 'r') as file:
            lines = file.readlines()

        with open("exported_medical_record.txt", 'w') as output_file:
            for line in lines:
                parts = line.strip().split(', ')
                if len(parts) >= 5:  # Ensure there are enough parts
                    patientID = parts[0].split(':')[0]  # Extract patient ID
                    testName = parts[0].split(':')[1].strip()  # Extract test name
                    date = parts[1].strip()  # Extract date
                    result = parts[2].strip()  # Extract result
                    unit = parts[3].strip()  # Extract unit
                    status = parts[4].strip()  # Extract status
                    result_date = datetime.now().strftime("%Y-%m-%d %H:%M")  # Current date for result date
                    output_file.write(
                        f"{patientID}, {testName}, {date}, {result}, {unit}, {status}, exported time :{result_date}\n")
        print("All medical records exported successfully.")

    def Import(self):
        records = []
        with open("exported_medical_record.txt", 'r') as file:
            for line in file:
                parts = [part.strip() for part in line.strip().split(',')]

                # Debugging print to see parts split from the line
                print(f"Parts: {parts}")

                # Ensure we have at least 6 parts
                if len(parts) >= 6:  # Ensure we have at least 6 parts for 'Exported Time'
                    # Split the first part by ':'
                    id_test_parts = parts[0].split(':')

                    # Ensure that the split operation results in at least 2 parts
                    if len(id_test_parts) >= 2:
                        record = {
                            "Patient ID": id_test_parts[0].strip(),
                            "Test Name": id_test_parts[1].strip(),
                            "Date": parts[1].strip(),
                            "Result": parts[2].strip(),
                            "Unit": parts[3].strip(),
                            "Status": parts[4].strip(),
                            "Exported Time": parts[5].strip() if len(parts) > 5 else None
                        }
                        records.append(record)
                else:
                    print(f"Warning: Not enough parts in line: {line.strip()}")

        print("Medical records imported successfully.")
        return records


def update_patient_dict(patientID, patient_obj):
    if patientID not in myDict:
        myDict[patientID] = patient_obj


def Range():
    print("Select the range input method:")
    print("1: Enter a range (e.g., 60-70)")
    print("2: Enter a single value to be less than or greater than (e.g., < 70 or > 60)")

    choice = input("Enter your choice (1-2): ")

    if choice == '1':
        while True:
            range_input = input("Enter the range (e.g., 60-70): ")
            try:
                lower_bound, upper_bound = map(float, range_input.split('-'))
                if lower_bound <= upper_bound:
                    return lower_bound, upper_bound, 1  # Case 1
                else:
                    print("Invalid range. Upper bound cannot be less than lower bound. Please try again.")
            except ValueError:
                print("Invalid input. Please enter a valid range in the format 'lower-upper'.")
    elif choice == '2':
        while True:
            value_input = input("Enter the value with comparison (e.g., < 70 or > 60): ")
            if value_input.startswith('<'):
                try:
                    value = float(value_input[1:].strip())
                    return None, value, 2  # Case 2: Less than value
                except ValueError:
                    print("Invalid input. Please enter a valid number after '<'.")
            elif value_input.startswith('>'):
                try:
                    value = float(value_input[1:].strip())
                    return value, None, 3  # Case 3: Greater than value
                except ValueError:
                    print("Invalid input. Please enter a valid number after '>'.")
            else:
                print("Invalid input. Please enter a value starting with '<' or '>'.")
    else:
        print("Invalid choice. Please try again.")
        return Range()  # Retry if invalid choice


def Save(fullName, shortName, lower_bound, upper_bound, unit, time_format, case):
    # Determine the range representation based on the case
    if case == 1:  # Case for a range
        range_representation = f"Range: > {lower_bound}, < {upper_bound}"
    elif case == 2:  # Case for single value less than
        range_representation = f"Range: < {upper_bound}"
    elif case == 3:  # Case for single value greater than
        range_representation = f"Range: > {lower_bound}"
    elif case == 4:  # Case for less than and greater than
        range_representation = f"Range: < {lower_bound}, > {upper_bound}"

    # Implement the logic to save the test details to medicalTest.txt
    with open("medicalTest.txt", 'a') as file:
        file.write(f"{fullName} ({shortName}); {range_representation}; Unit: {unit}, {time_format}\n")

    print("Medical test added successfully.")




def addMedicalTest():
    try:
        # Validate the full name
        while True:
            fullName = input("Enter test name (full name): ")
            if fullName.isalpha():
                break  # Exit the loop if the full name is valid
            else:
                print("Error: The full name should only contain alphabetic characters. Please try again.")

        # Validate the short name
        while True:
            shortName = input("Enter test name (short name): ")
            if shortName.isalpha():
                break  # Exit the loop if the short name is valid
            else:
                print("Error: The short name should only contain alphabetic characters. Please try again.")

        # Get and validate range
        lower_bound, upper_bound, case = Range()

        unit = input("Enter unit (e.g., g/dL): ")

        # Validate the time format
        while True:
            time_format = input("Enter time format (DD-HH-MM): ")
            if re.match(r'^\d{2}-\d{2}-\d{2}$', time_format):
                break  # Exit the loop if the format is correct
            else:
                print("Time format must be in the format DD-HH-MM (e.g., 11-10-03). Try again.")

        # Save the test (assuming a function Save exists)
        Save(fullName, shortName, lower_bound, upper_bound, unit, time_format, case)
        print("Test added successfully.")

    except ValueError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")



def updateMedicalTest():
    testName = input("Enter test name to update: ")
    found = False
    lines = []

    # Read existing tests from the file
    with open("medicalTest.txt", 'r') as file:
        lines = file.readlines()

    # Check if the test name or short name exists
    for line in lines:
        if testName in line:  # Check if the test name or short name is in the line
            found = True
            current_line = line  # Store the current line for updates
            break

    if not found:
        print("Test name or short name not found.")
        return

    # Extract current range, unit, and time format from the current line
    parts = current_line.strip().split('; ')
    shortName = parts[0]  # Get the full name with short name
    range_part = parts[1]  # Get the range part
    unit_part = parts[2]  # Get the unit part
    time_format = unit_part.split(', ')[1]  # Extract time format from unit part
    unit = unit_part.split(': ')[1].split(', ')[0]  # Extract unit from unit part

    # Ask what to update
    while True:
        print("Select what to update:")
        print("1. Range")
        print("2. Unit")
        print("3. Time Format")
        print("4. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            # Get the new range using the same concept as Save
            lower_bound, upper_bound, case = Range()  # Reuse existing function
            range_representation = ""
            if case == 1:  # Case for a range
                range_representation = f"Range: > {lower_bound}, < {upper_bound}"
            elif case == 2:  # Case for single value less than
                range_representation = f"Range: < {upper_bound}"
            elif case == 3:  # Case for single value greater than
                range_representation = f"Range: > {lower_bound}"
            elif case == 4:  # Case for less than and greater than
                range_representation = f"Range: < {lower_bound}, > {upper_bound}"

            # Update the line with new range, keeping the original short name, unit, and time format
            lines[lines.index(current_line)] = f"{shortName}; {range_representation}; Unit: {unit}, {time_format}\n"
            print("Range updated successfully.")
            break
        elif choice == '2':
            unit = input("Enter new unit: ")
            # Update the line with new unit, keeping the original short name, range, and time format
            lines[lines.index(current_line)] = f"{shortName}; {range_part}; Unit: {unit}, {time_format}\n"
            print("Unit updated successfully.")
            break
        elif choice == '3':
            new_time_format = input("Enter new time format (DD-HH-MM): ")
            if re.match(r'^\d{2}-\d{2}-\d{2}$', new_time_format):
                time_format = new_time_format  # Update the time format if the user entered a valid value
                lines[lines.index(current_line)] = f"{shortName}; {range_part}; Unit: {unit}, {time_format}\n"
                print("Time format updated successfully.")
                break
            else:
                print("Error: Time format must be in the format DD-HH-MM (e.g., 11-10-03).")
        elif choice == '4':
            print("Exiting update...")
            break
        else:
            print("Invalid choice, please select 1, 2, 3, or 4.")

    # Write the updated lines back to the file
    with open("medicalTest.txt", 'w') as file:
        file.writelines(lines)



record_file = "medicalRecord.txt"
test_file = "medicalTest.txt"
system = MedicalRecordSystem(record_file, test_file)

myDict = {}
with open(record_file, 'r') as file:
    for line in file:
        patientID = line.split(':')[0]
        myDict[patientID] = Patient(patientID)
        myDict[patientID].load(record_file)

while True:
    print("\nMedical Test Management System")
    print("1. Add new test")
    print("2. Add a new test record")
    print("3. Update patient records")
    print("4. Update tests")
    print("5. Filter tests")
    print("6. Generate a summary reports for tests' values")
    print("7. Generate a summary reports for tests' turnaround time")
    print("8. Delete a medical test record")
    print("9. Export records to CSV")
    print("10. Import records from CSV")
    print("11. Exit")

    choice = input("Please enter your choice: ")

    if choice == '1':
        addMedicalTest()
    elif choice == '2':
       system.addTestRecord()
    elif choice == '3':
        system.updateTestResult()
    elif choice == '4':
        updateMedicalTest()
    elif choice == '5':
        filter()
    elif choice == '6':
        printSummary()
    elif choice == '7':
        printTurnaround()
    elif choice == '8':
        system.deleteTest()
    elif choice == '9':
        system.export()
    elif choice == '10':
        records = system.Import()
    elif choice == '11':
        break
    else:
        print("\nInvalid choice.")
